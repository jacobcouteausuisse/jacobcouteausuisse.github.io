<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>couteausuis.se</title>
 <link href="https://couteausuis.se/atom.xml" rel="self"/>
 <link href="https://couteausuis.se/"/>
 <updated>2019-02-10T09:49:47-05:00</updated>
 <id>https://couteausuis.se</id>
 <author>
   <name>Jacob Roy</name>
   <email>jacob@asteroidlabs.io</email>
 </author>

 
 <entry>
   <title>bpg dump</title>
   <link href="https://couteausuis.se/thinkering/2019/02/05/bpg-dump/"/>
   <updated>2019-02-05T00:00:00-05:00</updated>
   <id>https://couteausuis.se/thinkering/2019/02/05/bpg dump</id>
   <content type="html">&lt;p&gt;In the past few weeks, i stumbled upon a vast trove of images that needed to be ordered and filled. Here’s the problem : To save bandwidth, a genius converted all those images into the &lt;a href=&quot;https://bellard.org/bpg/&quot;&gt;BPG format&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bpg-problems&quot;&gt;bpg problem(s)&lt;/h2&gt;
&lt;p&gt;First off, the format &amp;amp; thinking behind the BPG project is fantastic. Furthermore, &lt;a href=&quot;https://en.wikipedia.org/wiki/Fabrice_Bellard&quot;&gt;Fabrice Bellard&lt;/a&gt; is the perfect man to work on a Library like that. All around the web, you can find promising results : savings of up to 80% while retaining the same quality as a JPEG at Q80.&lt;/p&gt;

&lt;p&gt;Now, the first problem with a new (better) format is that from now on, it adds another player to the Monopoly game &lt;a href=&quot;https://xkcd.com/927/&quot;&gt;(relevant XKCD)&lt;/a&gt;.
Second, even after more than 9 months has passed since its release, the bpg format is not supported by any “big” image viewer. To give you an idea, here’s the list of apps that supports it :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bandisoft.com/honeyview/&quot;&gt;HoneyView&lt;/a&gt; (win)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bpgviewer.sourceforge.net&quot;&gt;BPGviewer&lt;/a&gt; (win)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/asimba/pybpgviewer&quot;&gt;Simple BPG image viewer&lt;/a&gt; (linux/win)
and nothing for mac.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solution-one&quot;&gt;solution one&lt;/h2&gt;
&lt;p&gt;I reluctantly decided to convert the images back to jpg. There are more than 45k files…
In my search for a (free) converter that would support directly BPG -&amp;gt; JPG, I found &lt;a href=&quot;http://www.romeolight.com/products/bpgconv/&quot;&gt;Romeolight BPGconv&lt;/a&gt;. Here’s the tricky part : I need a windows VM to run it, with enough space to hold the (non/)converted files. I set up a shared network folder to hold the bpg files (30gb) and another one with about 80gb free to hold the jpg files.
I then loaded all the files into the batch decoder and left it ran the whole night.&lt;/p&gt;

&lt;p&gt;The RomeoLight BPGconv suffers from a big bug where it copies every bpg file worked on into the AppData/Temp folder but doesn’t remove it afterwards. This bug leads to a full disk and the whole VM stopping after only 1h.&lt;/p&gt;

&lt;p&gt;To circumvent that, I wrote a simple BAT script that deletes the Temp folder, and use Task Scheduler to run it every 30 minutes. It worked and was surprisingly stable for 12hrs. After 12hrs with the frankenstein computer heating my room, I extrapolated the numbers and calculated that I needed 4.5 more days for it to churn through all the images. That’s a big no.&lt;/p&gt;

&lt;h2 id=&quot;solution-two&quot;&gt;solution two&lt;/h2&gt;
&lt;p&gt;Luckily for me, &lt;code class=&quot;highlighter-rouge&quot;&gt;libbpg&lt;/code&gt; is available on Homebrew and it comes with a bpg decoder &lt;code class=&quot;highlighter-rouge&quot;&gt;bpgdec&lt;/code&gt;. You can use it to convert BPG files to PNG (very long process) or to PPM, which seems faster. What the heck if PPM ? At this point I feel like I’ve fallen down a rabbit hole. &lt;a href=&quot;https://fileinfo.com/extension/ppm&quot;&gt;PPM&lt;/a&gt; stands for Portable Pixmap iMage and is really 24-bit image data in a text file… very helpful. From a 350kb BPG, we get a 12mb PPM file.&lt;/p&gt;

&lt;p&gt;To convert my fresh PPM file into something useable (that was the goal of the post) I need another userful tool, imagemagick.&lt;/p&gt;

&lt;p&gt;I wrote a small bash script to loop through all the bpg files in a folder and convert them to jpg.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;fullfilename &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.bpg&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fullfilename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$fullfilename&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Converting image # &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    bpgdec &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;.ppm &lt;span class=&quot;nv&quot;&gt;$fullfilename&lt;/span&gt;
    convert &lt;span class=&quot;nt&quot;&gt;-quality&lt;/span&gt; 75 &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;.ppm out/&lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;.jpg
    &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;.ppm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;final thoughts&lt;/h2&gt;
&lt;p&gt;This bash script is not very parallell-friendly (are any bash scripts?), so I split my stack of 45k images into 8 folder and started 8 scripts separately (4 cores + hyperthreading). In 8hrs everything was done, and I was very happy. I guess the moral of this post is to always try to do it yourself, you’ll learn much more along the way and probably find shortcuts.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>myths on electric cars</title>
   <link href="https://couteausuis.se/beyondinnovations/thinkering/2018/11/08/myths-on-electric-cars/"/>
   <updated>2018-11-08T00:00:00-05:00</updated>
   <id>https://couteausuis.se/beyondinnovations/thinkering/2018/11/08/myths-on-electric-cars</id>
   <content type="html">&lt;p&gt;When we explore the idea of an electric car and what it implies (mostly breaking ties with the old way of doing things), we quickly stumble upon a vast group of people who devote their lives to discredit the whole concept, by doubts and fear.&lt;/p&gt;

&lt;p&gt;Here’s the rough ideas with which they’ll try to convince you that electric cars are a conspiracy created by a &lt;a href=&quot;https://www.theverge.com/2018/9/7/17830810/elon-musk-smokes-weed-electric-plane-design-joe-rogan-podcast&quot;&gt;pot smoking alien&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;electric-cars-are-polluting-as-much-as-an-icev&quot;&gt;electric cars are polluting as much as an ICEV&lt;/h2&gt;
&lt;p&gt;In some States/Countries, electricity is made from big power stations, powered by an oil, gas or nuclear fuel. In those places, charging an electric car seems to only divert the fuel consumption to the power plants. This is mostly correct, except that using an electric car instead of an ICEV will still result in a much lower carbon footprint (or tiretrack…) and a much lower fuel consumption.&lt;/p&gt;

&lt;p&gt;Here’s the catch, because the combustion engine needs to fit inside an engine bay, be light enough as to not affect the car too much and be quiet enough not to disturb the car’s occupants, it needs to compromise on something else. A car combustion engine will compromise on efficiency. A modern one will probably get up to a measly 25% efficiency, meaning that for every drop of fuel, &lt;a href=&quot;https://en.wikipedia.org/wiki/Engine_efficiency#Internal_combustion_engines&quot;&gt;only 25% of it is converted into actual &lt;em&gt;work&lt;/em&gt;&lt;/a&gt;. Even worst, when idling, the efficiency drop close to 0%, since no &lt;em&gt;work&lt;/em&gt; is being done (except heating and a small electrical charge).&lt;/p&gt;

&lt;p&gt;On the other hand, power stations don’t have those kinds of limitations, they can be as big, as heavy and run as long as they want. In fact, their only limitation is to be as efficient as possible because their profitability depends on it. Modern thermal power station have an efficiency of &lt;a href=&quot;https://www.ge.com/power/about/insights/articles/2016/04/power-plant-efficiency-record&quot;&gt;about 60%&lt;/a&gt;. This makes power stations exactly 240% more efficient than combustion engine in cars. Let’s see how that translate into real-world usage : If you can travel 100 km with 10 L of petrol (10 L / 100 km) with an ICEV, the same 10L of petrol in a power plant could generate enough electricity to drive 240 km.&lt;/p&gt;

&lt;p&gt;Of course this calculation doesn’t take into account power transmission losses, battery efficiency, and the monetary &amp;amp; energy cost used when refining and transporting petrol to the petrol stations. Even if we factor it in, the trend is clear : It is at least 2 times more efficient (and cleaner) to drive an electric car instead of an ICEV, even when the electricity you use to charge it comes from a &lt;em&gt;dirty&lt;/em&gt; source. Imagine when your electricity comes from Solar, Wind or Hydro!&lt;/p&gt;

&lt;h2 id=&quot;batteries-are-not-recyclable-and-are-a-big-pollution-source&quot;&gt;batteries are not recyclable and are a big pollution source&lt;/h2&gt;
&lt;p&gt;Because of all the weird-sounding names like Lithium and Ion inside the battery, people think that it’s highly pollution (during its production or afterlife) and that we can’t even recycle it.&lt;/p&gt;

&lt;p&gt;In reality, It is true that &lt;a href=&quot;https://www.wired.com/2016/03/teslas-electric-cars-might-not-green-think/&quot;&gt;producing a car battery&lt;/a&gt; involves lots of polluting processes : Extracting Lithium, Nickel and Cobalt are very hazardous and can contaminate water wells, among others. On the other side, batteries can be recycled, its chemistry can be restored or its cells can be repurposed for stationary use (like &lt;a href=&quot;http://fortune.com/2015/06/15/electric-car-batteries-reuse/&quot;&gt;Nissan&lt;/a&gt; does).&lt;/p&gt;

&lt;h2 id=&quot;charging-could-overload-the-grid&quot;&gt;charging could overload the grid&lt;/h2&gt;
&lt;p&gt;Let’s consider Canada’s case : we have around &lt;a href=&quot;https://www150.statcan.gc.ca/n1/daily-quotidien/170629/dq170629d-eng.htm&quot;&gt;33 million cars&lt;/a&gt; on the road, with an average 20 000 km per year. Knowing that an electric car consumes about 20 kWh per 100 km, if every car in Canada was an electric one, the total needed electricity would amount to 130 million kWh yearly ( 3600 kWh per capita ). Adding this to the 15.5 MWh &lt;a href=&quot;https://www.nrcan.gc.ca/energy/facts/electricity/20068&quot;&gt;total electricity consumption per capita&lt;/a&gt; will bring it to 19.1 MWh yearly per capita. Changing all cars in Canada to electric would add only 23% of the total electricity consumption. Furthermore, because most of the charging occurs on off-peak hours, we could use up the surplus we currently have, and we would not need to add as much infrastructure.&lt;/p&gt;

&lt;p&gt;Now the killer argument is this : extracting and refining crude oil into petrol takes a lot of energy : &lt;a href=&quot;https://www.businessinsider.com/elon-musk-and-chris-paine-explain-how-the-electric-car-got-its-revenge-2011-10&quot;&gt;more than 5 kWh per litre of fuel&lt;/a&gt;. For and ICEV to travel 100 km (at 10 L / 100 km), it will have used up more than 50 kWh, whereas an electric car will use around 20 kWh. Another 2.5x more efficient. Knowing this, if every can in Canada was electric, it would actually &lt;em&gt;LOWER&lt;/em&gt; our total electricity consumption (because we extract and refine a lot of petrol).&lt;/p&gt;

&lt;h2 id=&quot;anxiety&quot;&gt;anxiety&lt;/h2&gt;
&lt;p&gt;Detractors believe that electric cars are not really usable because of the long time it takes to charge them and the small range they provide.&lt;/p&gt;

&lt;p&gt;While it’s true that charging on a Level1 charger can take a very long time (8hrs+), most of the charging happens on Level2 or Level3, with a charging time of 5hrs or 30-45mins. Next, consider that for most of the day, the car is parked and unused. Be it at your house, work, parking lot, etc. We can easily charge the car whenever it’s not in use, even if we are at 80% charge, because plugin the car takes only a few seconds, compared to filling up a ICEV tank.&lt;/p&gt;

&lt;p&gt;Range anxiety depends greatly on the person’s way of life : most of Canadians travel less than 50 km per day, meaning that they need to charge once in 10 days for a Tesla Model 3, and 4 days for a Nissan Leaf. Not bad at all! Do not forget that we do not need to go to special charging stations, because electricity is everywhere.&lt;/p&gt;

&lt;h2 id=&quot;final-word&quot;&gt;final word&lt;/h2&gt;
&lt;p&gt;While it’s true that when both cars go out of the production line, the electric car if &lt;em&gt;dirtier&lt;/em&gt; because of all the rare metals inside the battery and motor. But, as soon as the car travels 30 000 km, the total emissions are equal. After that, &lt;a href=&quot;http://www.hydroquebec.com/data/developpement-durable/pdf/analyse-comparaison-vehicule-electrique-vehicule-conventionnel.pdf&quot;&gt;the electric car is greener than the ICEV one&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>email non-revolution</title>
   <link href="https://couteausuis.se/thinkering/2018/11/05/email-non-revolution/"/>
   <updated>2018-11-05T00:00:00-05:00</updated>
   <id>https://couteausuis.se/thinkering/2018/11/05/email-non-revolution</id>
   <content type="html">&lt;p&gt;When we look back at the last 20 years, can we find one tool that we use every day that hasn’t been “revolutionized”? Cars -&amp;gt; Electric cars, Appliances -&amp;gt; &lt;em&gt;Smart&lt;/em&gt; Appliances, Phones -&amp;gt; Smartphones (can we still call those phones?), Lights -&amp;gt; LED, Wires&amp;amp;Cables -&amp;gt; Wireless, Computers that can display text -&amp;gt; Computers that can simulate the whole universe in VR (not really), Money -&amp;gt; Cryptocurrencies, Houses -&amp;gt; Tiny houses, WEB -&amp;gt; WEB2.0 (Graphical) -&amp;gt; WEB3.0 (Apps), Email -&amp;gt; Email. Yup, despite all the changes elsewhere, email hasn’t changed.&lt;/p&gt;

&lt;h2 id=&quot;i-beg-to-differ&quot;&gt;i beg to differ&lt;/h2&gt;
&lt;p&gt;Well, of course, it has changed, there was an &lt;em&gt;evolution&lt;/em&gt;, a few small incremental updates. Email clients are essentially web browsers, and emails, nowadays, essentially static webpages. Because of this, emails have gotten prettier with time, following the advance of web design. Email clients have gotten smarter, with SPAM filtering, Smart mailboxes, contacts, etc. In fact, for the majority of people, their web browser &lt;em&gt;is&lt;/em&gt; their email client. That’s right, &lt;em&gt;webmail&lt;/em&gt;. It kinda feels &lt;em&gt;full-circle-y&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;except-not&quot;&gt;except, not&lt;/h2&gt;
&lt;p&gt;At its core features, modern email is still the same old email. First, let’s consider the UI : Most, if not all, email clients display mailboxes on the left sidebar, besides a top to bottom list of email, showing the title and the sender’s address. When you write an email, you need more information than in other massaging system :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The recipient’s address. Some clients have contacts baked-in, some of which you can import/export contacts lists and some simply don’t have any contact system.&lt;/li&gt;
  &lt;li&gt;A Subject. This actually makes me angry. A Subject needs to be short, and set the tone for the email’s content. Also, it can’t be too vague. It really doesn’t need your name or the date, because the recipient already know that information from metadata. And it cannot be empty. I’m always deeply puzzled as to what to put in a title. Emails should be self-explanatory. Final rant : why put it on top, as one of the first things to fill? When you write a letter, you normally decide on the title at the end, after all your thoughts have been explained.&lt;/li&gt;
  &lt;li&gt;The content. Writing an email is still mostly text. Of course you can send links, images, even short videos and on some clients you can go full Microsoft-Word-Clipart-style on it. Even with all that, it’s still missing a dynamic WYSIWYG editor. Also 10Mb size limit? smartphone pictures are bigger than that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-would-i-write-an-email&quot;&gt;why would i write an email?&lt;/h2&gt;
&lt;p&gt;Writing email is mostly like sending a &lt;em&gt;physical&lt;/em&gt; mail. You write something, send it and you never know when the recipient is going to read it.
On most social networks, you can leave messages to others, messages that can be read in the future. BUT, emails aren’t social networks, you don’t NEED to be trapped inside the email’s network in order for it to work. The only thing you need is an address, like a webpage. And it works from everywhere, with everybody.&lt;/p&gt;

&lt;h2 id=&quot;peaked-or-left-behind&quot;&gt;peaked or left behind&lt;/h2&gt;
&lt;p&gt;Will emails get better? I think not. For the moment, it is perfect for what we do with it and will only get displaced when a new paradigm shift will occur.
Yes, it’s usage has reduced since social networks are prevailing, but we still can’t imagine a world without it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>potency : automatic trading using RSI indicator</title>
   <link href="https://couteausuis.se/asteroidlabs/2018/10/13/potency/"/>
   <updated>2018-10-13T00:00:00-04:00</updated>
   <id>https://couteausuis.se/asteroidlabs/2018/10/13/potency</id>
   <content type="html">&lt;p&gt;I very much like the RSI indicator for swing trading. It provides and easy way to understand the current market trend, and can be easily interpreted by a program since it’s only a single number.&lt;/p&gt;

&lt;p&gt;This project is going to be built using NodeJS and Docker, for portability between my MacBook, RaspberryPi and Vultr instance. Naming a project is always a weird process. This time the prototype will carry the name &lt;em&gt;potency&lt;/em&gt;, because it is very potent. Do you see how funny I am? I thought so.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;goals&lt;/h2&gt;
&lt;p&gt;Basically, I want to program to gather data about markets and store it in a database, to keep a history. On demand, it will calculate the pairs’ RSI from the (local) historic data, and send it to me using Telegram. Eventually, if it behaves well, I want the trading to be automated.&lt;/p&gt;

&lt;h2 id=&quot;warmup&quot;&gt;warmup&lt;/h2&gt;
&lt;p&gt;As with all exercises, we need some warmup first. In this case, we will query the last 20 (14 is the real minimum) candles from Binance, with which we can calculate the RSI.
Using &lt;a href=&quot;https://github.com/zoeyg/binance&quot;&gt;zoeyg’s binance&lt;/a&gt; module, I can easily query market data from Binance using :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;binanceRest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;klines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'100'&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resulting data contains a bunch of information on the specific candle, and we’ll store it in a MongoDB instance using the appropriate Schema.
Now, because I want to query a list of pairs, I wrap it up in a function and call it inside a forEach() loop. For the sake of your hair, watch out for NodeJS asychronicity.
The process will not exit if mongoose still has a connection idle, so we need to manage that. I used a decreasing counter in the mongo.save() loop so that if there’s no more data to be saved, it will kill the connection.&lt;/p&gt;

&lt;h2 id=&quot;feed&quot;&gt;feed&lt;/h2&gt;
&lt;p&gt;Binance has a very robust API and offers a WebSocket stream that we can connect to and receive &lt;em&gt;pushed&lt;/em&gt; data. Using the same module, we can easily subscribe to a ticker’s candles stream :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;binanceWS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onKline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// save only full candles&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;eventTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;currentClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Added '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' with timestamp '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eventTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' interval of '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' to DB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// skip the pushed update&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, Binance’s stream will push updates every second, but I only want to save updates when the candle is closed, so I test if the kline is final. One day, I would like to implement a type of “last-tick-update” to get more precise RSI calculations using the latest data, and the next 14 intervals, instead of using only last 14 interval.&lt;/p&gt;

&lt;h2 id=&quot;bot&quot;&gt;bot&lt;/h2&gt;
&lt;p&gt;During the programming of the other two parts, I decided to make a Telegram bot, where I could send query and it would reply with the current RSI for entry and exit, on different intervals. For a simple bot, I use &lt;a href=&quot;https://github.com/yagop/node-telegram-bot-api&quot;&gt;yagop’s node-telegram-bot-api&lt;/a&gt; module. It’s very easy to get started, for example with the keyword “/echo”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;.+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 'msg' is the received Message from Telegram&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 'match' is the result of executing the regexp above on the text content&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// of the message&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chatId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// User ID&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the captured &quot;whatever&quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// send back the matched &quot;whatever&quot; to the chat&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chatId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this, I can use a keyword with multiple options to craft a very specific query. For example, using “/check buy 30m”, the bot will reply with every pair that have a RSI below 35 on the 30m interval. Pretty neat!&lt;/p&gt;

&lt;h2 id=&quot;dockerfiles&quot;&gt;dockerfile(s)&lt;/h2&gt;
&lt;p&gt;First off, let’s start with a fresh and current Node image :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:10.12&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update

&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; / /opt/potency&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /opt/potency&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is a very simple dockerfile, it only copies the documents to the image, then install all the npm modules. The docker file is the same for &lt;code class=&quot;highlighter-rouge&quot;&gt;warmup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bot&lt;/code&gt;. I know that I could combine everything under one container, but I’m not used to that and was a bit rushed so it was faster to use 3 containers.&lt;/p&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;docker-compose&lt;/h2&gt;
&lt;p&gt;Remember when I used MongoDB? Yeah, we need a mongo container too!
This simple docker-compose file will build and start every container in this order : &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;warmup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;feed&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bot&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;version: &quot;3&quot;
services:
  warmup:
    build: ./warmup/
    command: node index.js
    depends_on:
      - mongo
  feed:
    build: ./feed/
    command: node index.js
    depends_on:
      - warmup
  bot:
    build: ./bot/
    command: node index.js
    depends_on:
      - feed
  mongo:
    image: mongo
    container_name: mongo
    environment:
      - discovery.type=single-node
    ports:
      - 27017:27017&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In only one command, I can start the whole project from any computer/server I have, and scale it easily.
Let’s see how successful my trades are with this!&lt;/p&gt;
</content>
 </entry>
 

</feed>
